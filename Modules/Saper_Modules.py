from lightbulb import Plugin, command, implements, SlashCommand, SlashContext, option
from hikari import ResponseType
from miru import View, Button, ViewContext
from Core import embed as _embed

plugin = Plugin("Saper")


def generate_level(nums):
    from random import shuffle

    LOSTS = [False, False, False]
    s = [True for _ in range(nums - len(LOSTS))] + LOSTS
    shuffle(s)
    return s


class SaperButton(Button):
    def __init__(self, no, row=None):
        self.no = no
        super().__init__(label="‚¨úÔ∏è", row=row)

    async def callback(self, ctx: ViewContext):
        embed = _embed("üéÆ –°–∞–ø–µ—Ä")
        s = self.view.level[self.no]
        if s:
            embed.description = "–í–µ—Ä–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            if self.view.valid + 1 == len(self.view.level) - 3:
                for i in self.view.children:
                    if hasattr(i, "no"):
                        i.label = "‚¨õÔ∏è" if self.view.level[i.no] else "üí£"
                        i.disabled = True
                embed.description = (
                    ":tada: –û–≥–æ, –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –Ω–∞—à–ª–∏ –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏!"
                )

            self.label = "‚¨õÔ∏è"
            self.disabled = True
            self.view.valid += 1
        else:
            embed.description = f"üí£ –ë–£–ú!!! –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –±–æ–º–±—É :skull:"
            for i in self.view.children:
                if hasattr(i, "no"):
                    i.label = "‚¨õÔ∏è" if self.view.level[i.no] else "üí£"
                    i.disabled = True
        if not self.view.message:
            return
        await self.view.message.edit(embed=embed, components=self.view.build())
        await ctx.defer()


class Saper(View):
    def __init__(self, author, mode=None):
        super().__init__(timeout=60)
        self.valid = 0
        POINTS = 12 if mode == "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π" else 15
        self.author = author
        self.level = generate_level(POINTS)
        ROW = 0
        for _ in range(POINTS):
            if POINTS == 12:
                if _ % 3 == 0:
                    ROW += 1
                self.add_item(SaperButton(_, ROW))
            else:
                self.add_item(SaperButton(_))


@plugin.command()
@option(
    "–¥–∏–∑–∞–π–Ω",
    required=False,
    description="–£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.",
    choices=["–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"],
)
@command("—Å–∞–ø–µ—Ä", '–ó–∞–ø—É—Å—Ç–∏—Ç –∏–≥—Ä—É "–°–∞–ø–µ—Ä".')
@implements(SlashCommand)
async def saper(ctx: SlashContext):
    design = ctx.raw_options.get("–¥–∏–∑–∞–π–Ω")
    view = Saper(ctx.user.id, design)
    await ctx.interaction.create_initial_response(
        ResponseType.MESSAGE_CREATE,
        embed=_embed("üéÆ –°–∞–ø–µ—Ä", "–ù–∞—á–∏–Ω–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!"),
        components=view.build(),
    )
    await view.start(await ctx.interaction.fetch_initial_response())
    await view.wait()


def load(bot):
    bot.add_plugin(plugin)


def unload(bot):
    bot.remove_plugin(plugin)
